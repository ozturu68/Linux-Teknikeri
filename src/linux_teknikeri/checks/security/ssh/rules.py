"""
SSH YapÄ±landÄ±rma KurallarÄ±
===========================

SSH config ayarlarÄ±nÄ± kontrol eden kural tanÄ±mlarÄ±.

Bu modÃ¼l rule-based architecture ile SSH gÃ¼venlik denetimini saÄŸlar.
Her kural bir SSH ayarÄ±nÄ± temsil eder ve:
    - Regex pattern (config'den parse iÃ§in)
    - Field name (SSHAudit dataclass'Ä±ndaki alan)
    - Parser fonksiyon (string â†’ uygun tip)
    - Validator fonksiyon (deÄŸer + audit â†’ Ã¶neri)
    - VarsayÄ±lan deÄŸer (opsiyonel)
    - Zorunluluk durumu (opsiyonel)

Dataclass:
    SSHConfigRule - Tek bir SSH kural tanÄ±mÄ±

Kural Listesi:
    SSH_CONFIG_RULES - TÃ¼m SSH kurallarÄ±nÄ±n listesi (8 kural)

Rule-Based Architecture AvantajlarÄ±:
    âœ… Yeni kural eklemek kolay (sadece listeye ekle)
    âœ… Kurallar baÄŸÄ±msÄ±z (bakÄ±m kolay)
    âœ… Test edilebilir (her kural ayrÄ± test)
    âœ… DokÃ¼mante (kural tanÄ±mÄ± = dokÃ¼mantasyon)
    âœ… GeniÅŸletilebilir (custom kurallar eklenebilir)

Ã–rnekler:
    >>> from linux_teknikeri.checks.security.ssh import SSH_CONFIG_RULES
    >>> 
    >>> # TÃ¼m kurallarÄ± listele
    >>> for rule in SSH_CONFIG_RULES:
    ...     print(f"{rule.name}: {rule.field_name}")
    PermitRootLogin: root_login_permitted
    PasswordAuthentication: password_auth_enabled
    ...
    >>> 
    >>> # Ä°lk kural
    >>> root_rule = SSH_CONFIG_RULES[0]
    >>> print(root_rule.name)
    PermitRootLogin
    >>> 
    >>> # Config parse et
    >>> import re
    >>> config = "PermitRootLogin yes\\n"
    >>> match = re.search(root_rule.pattern, config, re.MULTILINE)
    >>> if match:
    ...     value = root_rule.parser(match.group(1))  # True
    ...     print(f"Parsed: {value}")
    Parsed: True
    >>> 
    >>> # Validate et
    >>> from linux_teknikeri.checks.security import SSHAudit
    >>> audit = SSHAudit(config_exists=True, port='22')
    >>> recommendation = root_rule.validator(value, audit)
    >>> print(recommendation)
    ðŸ”´ CRÄ°TÄ°K: Root giriÅŸi aktif! DÃ¼zeltin: PermitRootLogin no

See Also:
    - validators.py: Validator fonksiyonlarÄ±
    - audit.py: KurallarÄ± kullanan denetim fonksiyonu
    - SSHAudit: Denetim sonuÃ§ dataclass'Ä±

Author: ozturu68
Version: 0.5.0
Date: 2025-11-01
License: MIT
"""

import logging
from dataclasses import dataclass
from typing import Callable, Optional, Any, List

# Local imports
from .validators import (
    _validate_root_login,
    _validate_password_auth,
    _validate_empty_passwords,
    _validate_protocol,
    _validate_port,
    _validate_x11_forwarding,
    _validate_user_environment,
    _validate_max_auth_tries,
)
from ..models import SSHAudit

# Logger
log = logging.getLogger(__name__)


# =============================================================================
# SSH CONFIG RULE DATACLASS
# =============================================================================

@dataclass
class SSHConfigRule:
    """
    SSH yapÄ±landÄ±rma kuralÄ± tanÄ±mÄ±.
    
    Her kural bir SSH ayarÄ±nÄ± kontrol eder ve gÃ¼venlik Ã¶nerisi Ã¼retir.
    Rule-based architecture sayesinde yeni kurallar kolayca eklenebilir.
    
    Attributes:
        name (str): SSH ayar adÄ± (config dosyasÄ±ndaki isim)
            Ã–rnek: "PermitRootLogin", "Port", "Protocol"
        
        pattern (str): Regex pattern (config dosyasÄ±ndan parse iÃ§in)
            Ã–rnek: r'^\s*PermitRootLogin\s+(\w+)'
            Not: MULTILINE ve IGNORECASE flag'leri ile kullanÄ±lÄ±r
        
        field_name (str): SSHAudit dataclass'Ä±ndaki field adÄ±
            Ã–rnek: "root_login_permitted", "port", "ssh_protocol"
        
        parser (Callable[[str], Any]): Parse fonksiyonu
            String deÄŸeri uygun tipe Ã§evirir
            Ã–rnek: lambda v: v.lower() == 'yes'  # str â†’ bool
            Ã–rnek: lambda v: int(v)              # str â†’ int
        
        validator (Callable[[Any, SSHAudit], Optional[str]]): Validator fonksiyon
            Parse edilen deÄŸeri kontrol eder ve Ã¶neri dÃ¶ndÃ¼rÃ¼r
            Signature: (value, audit) â†’ Optional[str]
            None: GÃ¼venli (Ã¶neri yok)
            str: GÃ¼venlik Ã¶nerisi
        
        is_required (bool): Zorunlu ayar mÄ±?
            True: Bu ayar None olmamalÄ± (eksikse uyarÄ±)
            False: Opsiyonel (None olabilir)
            Default: False
        
        default_value (Optional[Any]): VarsayÄ±lan deÄŸer
            Config'de yoksa kullanÄ±lÄ±r
            None: VarsayÄ±lan yok
            Default: None
    
    Examples:
        >>> # Basit kural tanÄ±mÄ±
        >>> rule = SSHConfigRule(
        ...     name="PermitRootLogin",
        ...     pattern=r'^\s*PermitRootLogin\s+(\w+)',
        ...     field_name="root_login_permitted",
        ...     parser=lambda v: v.lower() == 'yes',
        ...     validator=_validate_root_login
        ... )
        >>> 
        >>> # VarsayÄ±lan deÄŸerli kural
        >>> port_rule = SSHConfigRule(
        ...     name="Port",
        ...     pattern=r'^\s*Port\s+(\d+)',
        ...     field_name="port",
        ...     parser=lambda v: v,
        ...     validator=_validate_port,
        ...     default_value="22"
        ... )
        >>> 
        >>> # Zorunlu kural
        >>> critical_rule = SSHConfigRule(
        ...     name="PermitEmptyPasswords",
        ...     pattern=r'^\s*PermitEmptyPasswords\s+(\w+)',
        ...     field_name="empty_passwords_permitted",
        ...     parser=lambda v: v.lower() == 'yes',
        ...     validator=_validate_empty_passwords,
        ...     is_required=True  # Bu KRÄ°TÄ°K!
        ... )
    
    Usage Flow:
        1. Config dosyasÄ± okunur
        2. Pattern ile regex match yapÄ±lÄ±r
        3. Match bulunursa parser ile parse edilir
        4. Parse edilen deÄŸer SSHAudit'e atanÄ±r
        5. Validator ile kontrol edilir
        6. Ã–neri Ã¼retilirse listeye eklenir
    
    Note:
        - TÃ¼m pattern'ler case-insensitive (IGNORECASE)
        - TÃ¼m pattern'ler multiline (MULTILINE)
        - Parser fonksiyonlarÄ± exception raise edebilir (handle edilir)
        - Validator fonksiyonlarÄ± pure function olmalÄ± (side-effect yok)
    
    See Also:
        - SSH_CONFIG_RULES: TÃ¼m kurallarÄ±n listesi
        - _parse_ssh_setting(): Pattern matching ve parsing
        - _apply_ssh_rules(): KurallarÄ± uygulama
    """
    
    name: str
    pattern: str
    field_name: str
    parser: Callable[[str], Any]
    validator: Callable[[Any, SSHAudit], Optional[str]]
    is_required: bool = False
    default_value: Optional[Any] = None
    
    def __repr__(self) -> str:
        """Developer-friendly representation."""
        return (
            f"SSHConfigRule(name='{self.name}', "
            f"field='{self.field_name}', "
            f"required={self.is_required})"
        )
    
    def __str__(self) -> str:
        """User-friendly representation."""
        return f"{self.name} â†’ {self.field_name}"


# =============================================================================
# SSH CONFIGURATION RULES (8 kuralÄ±n tanÄ±mÄ±)
# =============================================================================

SSH_CONFIG_RULES: List[SSHConfigRule] = [
    # =========================================================================
    # 1. PermitRootLogin (KRÄ°TÄ°K!)
    # =========================================================================
    SSHConfigRule(
        name="PermitRootLogin",
        pattern=r'^\s*PermitRootLogin\s+(\w+)',
        field_name="root_login_permitted",
        parser=lambda v: v.lower() == 'yes',
        validator=_validate_root_login,
        is_required=False,
        default_value=None,
    ),
    
    # =========================================================================
    # 2. PasswordAuthentication
    # =========================================================================
    SSHConfigRule(
        name="PasswordAuthentication",
        pattern=r'^\s*PasswordAuthentication\s+(\w+)',
        field_name="password_auth_enabled",
        parser=lambda v: v.lower() == 'yes',
        validator=_validate_password_auth,
        is_required=False,
        default_value=None,
    ),
    
    # =========================================================================
    # 3. PermitEmptyPasswords (Ã‡OK KRÄ°TÄ°K!)
    # =========================================================================
    SSHConfigRule(
        name="PermitEmptyPasswords",
        pattern=r'^\s*PermitEmptyPasswords\s+(\w+)',
        field_name="empty_passwords_permitted",
        parser=lambda v: v.lower() == 'yes',
        validator=_validate_empty_passwords,
        is_required=True,  # Bu KRÄ°TÄ°K! None olmamalÄ±
        default_value=False,  # VarsayÄ±lan: no (gÃ¼venli)
    ),
    
    # =========================================================================
    # 4. Protocol
    # =========================================================================
    SSHConfigRule(
        name="Protocol",
        pattern=r'^\s*Protocol\s+(\S+)',
        field_name="ssh_protocol",
        parser=lambda v: v,  # String olarak sakla
        validator=_validate_protocol,
        is_required=False,
        default_value="2",  # VarsayÄ±lan: Protocol 2
    ),
    
    # =========================================================================
    # 5. Port
    # =========================================================================
    SSHConfigRule(
        name="Port",
        pattern=r'^\s*Port\s+(\d+)',
        field_name="port",
        parser=lambda v: v,  # String olarak sakla
        validator=_validate_port,
        is_required=False,
        default_value="22",  # VarsayÄ±lan: Port 22
    ),
    
    # =========================================================================
    # 6. X11Forwarding
    # =========================================================================
    SSHConfigRule(
        name="X11Forwarding",
        pattern=r'^\s*X11Forwarding\s+(\w+)',
        field_name="x11_forwarding",
        parser=lambda v: v.lower() == 'yes',
        validator=_validate_x11_forwarding,
        is_required=False,
        default_value=False,  # VarsayÄ±lan: no
    ),
    
    # =========================================================================
    # 7. PermitUserEnvironment
    # =========================================================================
    SSHConfigRule(
        name="PermitUserEnvironment",
        pattern=r'^\s*PermitUserEnvironment\s+(\w+)',
        field_name="permit_user_environment",
        parser=lambda v: v.lower() == 'yes',
        validator=_validate_user_environment,
        is_required=False,
        default_value=False,  # VarsayÄ±lan: no
    ),
    
    # =========================================================================
    # 8. MaxAuthTries
    # =========================================================================
    SSHConfigRule(
        name="MaxAuthTries",
        pattern=r'^\s*MaxAuthTries\s+(\d+)',
        field_name="max_auth_tries",
        parser=lambda v: int(v),
        validator=_validate_max_auth_tries,
        is_required=False,
        default_value=6,  # VarsayÄ±lan: 6
    ),
]


# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def get_rule_by_name(name: str) -> Optional[SSHConfigRule]:
    """
    Ä°sme gÃ¶re kural bulur.
    
    Args:
        name: SSH ayar adÄ± (Ã¶rn: "PermitRootLogin")
    
    Returns:
        Optional[SSHConfigRule]: Bulunan kural veya None
    
    Examples:
        >>> rule = get_rule_by_name("PermitRootLogin")
        >>> if rule:
        ...     print(rule.field_name)
        root_login_permitted
    """
    for rule in SSH_CONFIG_RULES:
        if rule.name == name:
            return rule
    return None


def get_rule_by_field(field_name: str) -> Optional[SSHConfigRule]:
    """
    Field name'e gÃ¶re kural bulur.
    
    Args:
        field_name: SSHAudit field adÄ± (Ã¶rn: "root_login_permitted")
    
    Returns:
        Optional[SSHConfigRule]: Bulunan kural veya None
    
    Examples:
        >>> rule = get_rule_by_field("root_login_permitted")
        >>> if rule:
        ...     print(rule.name)
        PermitRootLogin
    """
    for rule in SSH_CONFIG_RULES:
        if rule.field_name == field_name:
            return rule
    return None


def get_critical_rules() -> List[SSHConfigRule]:
    """
    Kritik (zorunlu) kurallarÄ± dÃ¶ndÃ¼rÃ¼r.
    
    Returns:
        List[SSHConfigRule]: Kritik kurallar (is_required=True)
    
    Examples:
        >>> critical = get_critical_rules()
        >>> for rule in critical:
        ...     print(f"KRÄ°TÄ°K: {rule.name}")
        KRÄ°TÄ°K: PermitEmptyPasswords
    """
    return [rule for rule in SSH_CONFIG_RULES if rule.is_required]


def get_rules_with_defaults() -> List[SSHConfigRule]:
    """
    VarsayÄ±lan deÄŸeri olan kurallarÄ± dÃ¶ndÃ¼rÃ¼r.
    
    Returns:
        List[SSHConfigRule]: VarsayÄ±lan deÄŸerli kurallar
    
    Examples:
        >>> defaults = get_rules_with_defaults()
        >>> for rule in defaults:
        ...     print(f"{rule.name} = {rule.default_value}")
        PermitEmptyPasswords = False
        Protocol = 2
        Port = 22
        X11Forwarding = False
        PermitUserEnvironment = False
        MaxAuthTries = 6
    """
    return [rule for rule in SSH_CONFIG_RULES if rule.default_value is not None]


def validate_rules_consistency() -> List[str]:
    """
    Kural tanÄ±mlarÄ±nÄ±n tutarlÄ±lÄ±ÄŸÄ±nÄ± kontrol eder (self-check).
    
    Returns:
        List[str]: Hata mesajlarÄ± (boÅŸsa tutarlÄ±)
    
    Examples:
        >>> errors = validate_rules_consistency()
        >>> if errors:
        ...     for error in errors:
        ...         print(f"HATA: {error}")
        >>> else:
        ...     print("âœ… TÃ¼m kurallar tutarlÄ±")
    
    Note:
        Bu fonksiyon test ve debug iÃ§in kullanÄ±lÄ±r.
        Production'da Ã§aÄŸrÄ±lmaz.
    """
    errors = []
    
    # 1. Duplicate name kontrolÃ¼
    names = [rule.name for rule in SSH_CONFIG_RULES]
    duplicates = [name for name in names if names.count(name) > 1]
    if duplicates:
        errors.append(f"Duplicate rule names: {set(duplicates)}")
    
    # 2. Duplicate field_name kontrolÃ¼
    fields = [rule.field_name for rule in SSH_CONFIG_RULES]
    duplicates = [field for field in fields if fields.count(field) > 1]
    if duplicates:
        errors.append(f"Duplicate field names: {set(duplicates)}")
    
    # 3. Parser callable kontrolÃ¼
    for rule in SSH_CONFIG_RULES:
        if not callable(rule.parser):
            errors.append(f"{rule.name}: parser is not callable")
    
    # 4. Validator callable kontrolÃ¼
    for rule in SSH_CONFIG_RULES:
        if not callable(rule.validator):
            errors.append(f"{rule.name}: validator is not callable")
    
    # 5. Pattern geÃ§erlilik kontrolÃ¼
    import re
    for rule in SSH_CONFIG_RULES:
        try:
            re.compile(rule.pattern)
        except re.error as e:
            errors.append(f"{rule.name}: invalid regex pattern - {e}")
    
    return errors


def get_rules_summary() -> str:
    """
    TÃ¼m kurallarÄ±n Ã¶zetini metin olarak dÃ¶ndÃ¼rÃ¼r.
    
    Returns:
        str: Kural Ã¶zeti (Ã§ok satÄ±rlÄ±)
    
    Examples:
        >>> summary = get_rules_summary()
        >>> print(summary)
        SSH Configuration Rules Summary
        ================================
        Total Rules: 8
        Critical Rules: 1
        ...
    """
    lines = [
        "SSH Configuration Rules Summary",
        "=" * 50,
        f"Total Rules: {len(SSH_CONFIG_RULES)}",
        f"Critical Rules: {len(get_critical_rules())}",
        f"Rules with Defaults: {len(get_rules_with_defaults())}",
        "",
        "Rules:",
    ]
    
    for i, rule in enumerate(SSH_CONFIG_RULES, 1):
        required_mark = " (REQUIRED)" if rule.is_required else ""
        default_mark = f" [default: {rule.default_value}]" if rule.default_value is not None else ""
        lines.append(
            f"  {i}. {rule.name}{required_mark}{default_mark}"
        )
        lines.append(f"     â†’ {rule.field_name}")
    
    return "\n".join(lines)


# =============================================================================
# MODULE INITIALIZATION
# =============================================================================

# Startup'ta kural tutarlÄ±lÄ±ÄŸÄ±nÄ± kontrol et
_consistency_errors = validate_rules_consistency()
if _consistency_errors:
    log.error(f"SSH kurallarÄ±nda tutarsÄ±zlÄ±k bulundu: {_consistency_errors}")
    raise ValueError(f"SSH rule configuration errors: {_consistency_errors}")
else:
    log.debug(f"SSH kurallarÄ± yÃ¼klendi: {len(SSH_CONFIG_RULES)} kural, tutarlÄ±")


# =============================================================================
# MODULE METADATA
# =============================================================================

__all__ = [
    'SSHConfigRule',
    'SSH_CONFIG_RULES',
    'get_rule_by_name',
    'get_rule_by_field',
    'get_critical_rules',
    'get_rules_with_defaults',
    'validate_rules_consistency',
    'get_rules_summary',
]