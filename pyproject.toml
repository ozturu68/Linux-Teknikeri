# =============================================================================
# Linux Teknikeri - Modern Python Packaging Configuration
# PEP 517/518/621/660 uyumlu yapılandırma
# =============================================================================

[build-system]
requires = [
    "setuptools>=68.0",
    "wheel>=0.41.0",
]
build-backend = "setuptools.build_meta"

# =============================================================================
# Project Metadata (PEP 621)
# =============================================================================
[project]
name = "linux-teknikeri"
version = "0.3.0"
description = "Pop!_OS ve Debian tabanlı sistemler için kapsamlı sistem analiz ve bakım aracı"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "ozturu68", email = "ozturu68@users.noreply.github.com" }
]
maintainers = [
    { name = "ozturu68", email = "ozturu68@users.noreply.github.com" }
]
keywords = [
    "linux",
    "system-monitor",
    "diagnostic",
    "hardware-info",
    "system-analysis",
    "debian",
    "pop-os",
    "ubuntu"
]
classifiers = [
    # Development Status
    "Development Status :: 4 - Beta",
    
    # Intended Audience
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    
    # License
    "License :: OSI Approved :: MIT License",
    
    # Operating System
    "Operating System :: POSIX :: Linux",
    
    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    
    # Topics
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    
    # Typing
    "Typing :: Typed",
]

# =============================================================================
# Dependencies
# =============================================================================
dependencies = [
    "rich>=13.0.0,<14.0.0",      # Terminal formatting ve renkli çıktılar
    "psutil>=5.9.0,<6.0.0",      # Sistem ve donanım bilgileri
]

[project.optional-dependencies]
# Development tools
dev = [
    "black>=23.0.0",             # Code formatter
    "ruff>=0.1.0",               # Fast linter (flake8'in modern alternatifi)
    "mypy>=1.0.0",               # Type checker
    "pytest>=7.0.0",             # Testing framework
    "pytest-cov>=4.0.0",         # Coverage plugin
    "pre-commit>=3.0.0",         # Git hooks
]

# Documentation
docs = [
    "mkdocs>=1.5.0",             # Documentation generator
    "mkdocs-material>=9.0.0",    # Material theme
    "mkdocstrings[python]>=0.24.0",  # Python docstrings support
]

# All optional dependencies
all = [
    "linux-teknikeri[dev,docs]",
]

# =============================================================================
# Project URLs
# =============================================================================
[project.urls]
Homepage = "https://github.com/ozturu68/Linux-Teknikeri"
Repository = "https://github.com/ozturu68/Linux-Teknikeri"
"Bug Tracker" = "https://github.com/ozturu68/Linux-Teknikeri/issues"
Changelog = "https://github.com/ozturu68/Linux-Teknikeri/blob/main/CHANGELOG.md"
Documentation = "https://github.com/ozturu68/Linux-Teknikeri#readme"

# =============================================================================
# Entry Points (CLI Commands)
# =============================================================================
[project.scripts]
tekniker = "linux_teknikeri.main:main"
linux-tekniker = "linux_teknikeri.main:main"  # Alternatif komut adı

# =============================================================================
# Setuptools Configuration
# =============================================================================
[tool.setuptools]
# Package discovery
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["linux_teknikeri*"]
namespaces = false

[tool.setuptools.package-data]
linux_teknikeri = [
    "py.typed",              # PEP 561 type information marker
]

# =============================================================================
# Black - Code Formatter
# =============================================================================
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# =============================================================================
# Ruff - Modern Python Linter (flake8 + isort + pyupgrade kombinasyonu)
# =============================================================================
[tool.ruff]
line-length = 100
target-version = "py38"

# Linting kuralları
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "YTT",    # flake8-2020
    "S",      # flake8-bandit (security)
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented-out code)
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

# Göz ardı edilecek kurallar
ignore = [
    "S101",   # assert kullanımı (test'lerde gerekli)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic values
    "S603",   # subprocess kullanımı (bizim durumumuzda gerekli)
    "S607",   # subprocess partial path (bizim durumumuzda gerekli)
]

# Dosya başına göz ardı
[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["linux_teknikeri"]
force-single-line = false
lines-after-imports = 2

# =============================================================================
# MyPy - Type Checker
# =============================================================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Kademeli olarak aktif edilecek
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_calls = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "rich.*",
]
ignore_missing_imports = true

# =============================================================================
# Pytest - Testing Framework
# =============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Markers must be registered
    "--strict-config",        # Config must be valid
    "--showlocals",           # Show local variables in tracebacks
    "-vv",                    # Verbose output
    "--cov=linux_teknikeri",  # Coverage for our package
    "--cov-report=term-missing",  # Show missing lines
    "--cov-report=html",      # Generate HTML report
    "--cov-report=xml",       # Generate XML report (for CI)
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# =============================================================================
# Coverage - Code Coverage Configuration
# =============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# Bandit - Security Linter
# =============================================================================
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "build", "dist"]
severity = "medium"
confidence = "medium"

# =============================================================================
# Pyright - Type Checker (LSP için)
# =============================================================================
[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.*",
]
pythonVersion = "3.8"
pythonPlatform = "Linux"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false